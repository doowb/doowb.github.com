{
  "name": "assemble",
  "description": "Get the rocks out of your socks. Assemble helps you **quickly launch static web projects** by emphasizing a strong separation of concerns between structure, style, content and configuration.",
  "version": "0.3.24",
  "homepage": "https://github.com/assemble/assemble",
  "author": {
    "name": "assemble",
    "url": "https://github.com/assemble/assemble"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/assemble/assemble.git"
  },
  "bugs": {
    "url": "git://github.com/assemble/assemble/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/assemble/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "amdefine": "0.0.4",
    "helper-lib": "~0.1.7",
    "handlebars": "~1.0.9",
    "highlight.js": "~7.3.0",
    "js-yaml": "~2.0.2",
    "lodash": "~1.0.1",
    "marked": "~0.2.8"
  },
  "devDependencies": {
    "assemble-styles": "~0.3.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-watch": "~0.2.0",
    "chai": "~1.5.0",
    "grunt-mocha-test": "~0.2.0",
    "testem": "~0.2.68"
  },
  "keywords": [
    "blog generator",
    "blog",
    "boilerplate",
    "boilerplates",
    "bootstrap",
    "build and deployment",
    "build system",
    "build",
    "build bootstrap",
    "builder",
    "compile",
    "compiler",
    "components",
    "conventions",
    "deploy",
    "example handlebars",
    "framework",
    "generator",
    "gh-pages",
    "grunt task",
    "grunt",
    "gruntplugin",
    "handlebars",
    "helpers",
    "jekyll alternative",
    "jekyll static",
    "jekyll",
    "json data",
    "mock data",
    "mocking",
    "modules",
    "mustache",
    "node blog",
    "node jekyll",
    "parse",
    "parser",
    "partial",
    "partials",
    "pre-processor",
    "preprocessor",
    "render",
    "renderer",
    "scaffold",
    "scaffolds",
    "site builder",
    "site generator",
    "site generators",
    "static HTML",
    "static site",
    "templates",
    "templating",
    "theme",
    "themes",
    "tool",
    "toolkit",
    "utility",
    "web development",
    "yaml data",
    "web framework"
  ],
  "readme": "# [Assemble v0.3.24](http://github.com/assemble/assemble) [![Build Status](https://travis-ci.org/assemble/assemble.png)](https://travis-ci.org/assemble/assemble)\n\n> Get the rocks out of your socks. Assemble helps you **quickly launch static web projects** by emphasizing a strong separation of concerns between structure, style, content and configuration.\n\n\n_This project just launched **so expect frequent changes**._ And if you find this project interesting please consider starring it to receive updates.\n\n### Getting Help\n\nAssemble has many more features than we've been able to document thus far. So while we work to improve the docs, _please let us know if you have any questions or have any trouble getting Assemble to work. And feel free to create an [Issue][issues], we're here to help._\n\n#### [Please visit the wiki](http://github.com/assemble/assemble/wiki) \n\n**Table of Contents**\n\n- [The \"assemble\" task](#the-assemble-task)\n- [Options](#options)\n  - [Task defaults](#task-defaults)\n    - [engine](#engine)\n    - [helpers](#helpers)\n    - [flatten](#flatten)\n    - [assets](#assets)\n    - [data](#data)\n    - [layout](#layout)\n    - [partials](#partials)\n    - [ext](#ext)\n  - [YAML options](#yaml-options)\n    - [filename](#filename)\n    - [strict](#strict)\n    - [schema](#schema)\n- [Features](#features)\n    - [Markdown](#markdown)\n    - [\"Include\" or import externalized content](#include-or-import-externalized-content)\n    - [Write \"inline\" markdown](#write-inline-markdown)\n- [Example Projects](#example-projects)\n  - [Build Bootstrap's Grid with JSON or YAML](#build-bootstraps-grid-with-json-or-yaml)\n- [About](#about)\n- [Bug tracker](#bug-tracker)\n- [Contributing](#contributing)\n- [Authors](#authors)\n- [License](#copyright-and-license)\n\n\n\n\n\n## Quick start\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install assemble --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('assemble');\n```\n\nWhen completed, you'll be able to run the various `grunt` commands provided:\n\n#### build - `grunt assemble`\nRuns the `assemble` task to rebuild the project. \n\n#### test - `grunt test`\nRuns jshint on JavaScripts and mocha unit tests on your templates.\n\n#### watch - `grunt watch`\nRequires [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch), `npm i grunt-contrib-watch`. This is a convenience task for watching files and automatically re-building them whenever you save. Requires the [grunt-contrib-watch](http://github.com/gruntjs/grunt-contrib-watch) Grunt plugin.\n\nShould you encounter problems with installing dependencies or running the `grunt` commands, be sure to first uninstall any previous versions (global and local) you may have installed, and then rerun `npm install`.\n\n## The \"assemble\" task\nIn your project's Gruntfile, add a section named `assemble` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  assemble: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    }\n  }\n});\ngrunt.loadNpmTasks('assemble');\n\ngrunt.registerTask('default', [\n  'jshint',\n  'assemble'\n]);\n```\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n\n## Options\nSee the [Options](https://github.com/assemble/assemble/wiki/Options) section on the Wiki for more information.\n\n#### assets\n_Path to \"assets\" (or \"public\") folder._\n\nType: `String` (optional)\nDefault: `undefined`\n\nUsed with the `{{assets}}` template to resolve the relative path _to the destination assets folder_, _from the dest file_.\n\nExample:\n\n``` js\nassemble: {\n  options: {\n    assets: 'dist/assets'\n  },\n  ...\n}\n```\nExample usage:\n\n``` html\n<link href=\"{{assets}}/css/styles.css\" rel=\"stylesheet\">\n```\nResulting in:\n\n``` html\n<link href=\"dist/assets/css/styles.css\" rel=\"stylesheet\">\n```\n\n\n#### data\n_The data to populate templates._\n\nType: `Object` (optional)\nParameters: `String|Array`\nDefault: `src/data`\n\nGets the data from specified `JSON` and/or `YAML` files to populate the templates when rendered. Data gets passed through the `data` object to the options on the assemble task, then to the context in your templates. Also useful for specifying [configuration][config] data, such as when to render certain templates. For example:\n\n`page.json`\n``` json\n{\n  \"production\": false\n}\n```\n\n``` handlebars\n\n<link href=\"assets/bootstrap.css\" rel=\"stylesheet\">\n\n```\n\n_Note that Handlebars.js is the only supported template engine at this time_. If you would like to see another engine added to Assemble, please make a [feature request][issues] (or pull request).\n\nExample:\n``` js\nassemble: {\n  options: {\n    data: ['src/data/*.{json,yml,yaml}', 'config/global.json', 'styles/bootstrap.json']\n  },\n  ...\n}\n```\n\nData: `widget.json` (or `widget.yml`)\n``` json\n{\n  \"name\": \"Square Widget\",\n  \"modifier\": \"widget-square\"\n}\n```\n\nTemplate: `widget.hbs`\n``` html\n<div class=\"widget {{ widget.modifier }}\">{{ widget.name }}</div>\n```\n\nCompiled result after running `grunt assemble`:\n``` html\n<div class=\"widget widget-square\">Square Widget</div>\n```\nAlso see: [YAML front matter][yaml] todo...\n\n\n#### layout\nType: `String` (optional)\nDefault: `undefined`\n\nPath to the layout to be used.\n\n``` js\nassemble: {\n  options: {\n    layout: 'src/layouts/default.hbs'\n  },\n  files: {\n    'docs': ['src/files/*.hbs']\n  }\n}\n```\n\n#### partials\nType: `Object` (optional)\nParameters: `Object|Array`\nDefault: `undefined`\n\nAccepts [minimatch](https://github.com/isaacs/minimatch) patterns to define the Handlebars partials files, or paths to the directories of files to be used.\n\n``` js\nassemble: {\n  options: {\n    partials: ['src/partials/*.hbs', 'src/snippets/*.hbs']\n  },\n  files: {\n    'docs': ['src/files/*.hbs']\n  }\n}\n```\n\n#### engine\nType: `String` (optional)\nDefault: `handlebars`\n\nThe engine to use for processing client-side templates. Assemble ships Handlebars as the default template engine, if you are interested in using a different engine visit the documentation to see an up-to-date list of template engines.\n\nPull requests are welcome for additional template engines. Since we're still working to update the docs, you many also contact [@doowb](http://github.com/doowb) for more information or create an [Issue][assemble-issues].\n\n#### helpers\nType: `Object|Array` (optional)\nDefault: [helper-lib](http://github.com/assemble/helper-lib)\n\nPath defined to a directory of custom helpers to use with the specified template engine. Assemble currently includes more than **[75 built-in Handlebars helpers](https://github.com/assemble/helper-lib)**, since Handlebars is the default engine for Assemble.\n\n``` js\nassemble: {\n  options: {\n    helpers: 'your/custom/helpers'\n  },\n  ...\n}\n```\n\n#### ext\nType: `String`\nDefault: `.html`\n\nSpecify the file extension for destination files. Example:\n\n``` js\nassemble: {\n\n  // Build sitemap from JSON and templates\n  sitemap: {\n    options: {\n      ext: '.xml'\n    },\n    files: {\n      '.': ['path/to/sitemap.tmpl']\n    }\n  },\n\n  // Build README from YAML and templates\n  readme: {\n    options: {\n      ext: '.md'\n    },\n    files: {\n      '.': ['path/to/readme.tmpl']\n    }\n  }\n}\n```\n\n#### flatten\nType: `Boolean`\nDefault: `false`\n\nRemove anything after (and including) the first \".\" in the destination path, then append this value.\n\n\n### YAML options\nAssemble makes the following options available from `js-yaml`. See [js-yaml](https://github.com/nodeca/js-yaml) for more information.\n\n#### filename\nType: `String`\nDefault: `null`\n\nString to be used as a file path in error/warning messages.\n\n#### strict\nType: `Boolean`\nDefault: `false`\n\nMakes the loader to throw errors instead of warnings.\n\n#### schema\nType: `String`\nDefault: `DEFAULT_SCHEMA`\n\nSpecifies a schema to use.\n\n\n\n### Custom Options\n#### Contexts\nA common use case for custom options is to add contexts for `development` and `production` environments:\n\n``` javascript\nassemble {\n  myProject: {\n    options: {\n      development: true,\n      production: false\n    },\n    files: {\n      'dest': ['src/templates*.hbs']\n    }\n  }\n}\n```\nIn your templates just wrap sections with these contexts to include or exclude content based on current working environment.\n``` hbs\n{{#development}}\n<script src=\"script.js\"></script>\n{{/development}}\n{{#production}}\n<script src=\"script.min.js\"></script>\n{{/production}}\n```\n\n\n## Usage Examples\n\n### Markdown\n\n> Wouldn't it be awesome if you could just _use markdown however you wanted, wherever you needed it_?\n\nAssemble gives you the flexibility to:\n\n  * **Write entire documents in markdown**, and later compile them to HTML\n  * **Keep sections of documents in externalized markdown files**, so they can be imported into other documents\n  * **Embed or write \"inline\" markdown** on-the-fly inside HTML documents\n\n\n_Read more about markdown features and `options` in the [markdown documentation][markdown]._\n\n\n### \"Include\" extenal content\nUse the markdown expression, `{{md}}`, to enable importing of external markdown content.\n\n**Example #1: using full path**\n``` handlebars\n{{md ../path/to/content.md}}\n```\n\n**Example #2: using variables**\nOr use a variable instead of setting the path directly inside the template. For example you can add the content variable to a YAML header:\n\n``` yaml\n---\npage:\n  title: Home\ncontent: ../path/to/content.md\n---\n```\nthen use it like this:\n\n``` handlebars\n{{md content}}\n```\n\n#### Write \"inline\" markdown\nThe `{{#markdown}}{{/markdown}}` block expression allows markdown to be written \"inline\" with any HTML and handlebars content.\n\nExample:\n\n``` handlebars\n{{#markdown}}\n# Inline Markdown is awesome\n\n> this is markdown content\n\n  * useful for simple content\n  * great for blog posts\n  * easier on the eyes than angle brackets\n  * even links look prettier\n\n### Pretty links\n[Visit Assemble](https://github.com/assemble/assemble)\n\n### Even Prettier links\nEmbed handlebars templates to make them even prettier.\n{{#page.links}}\n[{{text}}]({{href}})\n{{/page.links}}\n\n{{/markdown}}\n```\n\n\n---\n\n### Task defaults\nTask targets, files and options may be specified according to the grunt [Configuring tasks](https://github.com/assemble/assemble/wiki/Task-and-Targets) guide.\n\n#### Build templates\n\n```javascript\nassemble: {\n  templates: {\n    files: {\n      'index.html': ['index.hbs']\n    }\n  }\n}\n```\n\n#### Build multiple specified files individually\n\nYou can specify multiple `destination: [source]` items in `files`.\n\n```javascript\nassemble: {\n  gh_pages: {\n    files: {\n      'docs': ['getting-started.hbs'],\n      '.':    ['index.hbs']\n    }\n  }\n}\n```\n\n#### Build directory of files\n\nGrunt supports filename expansion (also know as globbing) via the built-in [node-glob][node-glob] and [minimatch][minimatch] libraries. So Templates may be used in filepaths or glob patterns.\n\n```javascript\nassemble: {\n  project: {\n    files: {\n      '.': ['templates/*.hbs']\n    }\n  }\n}\n```\n\n## Example Projects\nBrowse the [examples][assemble-examples] folder to get a better idea of what Assemble can do. To build the examples run `grunt examples`.\n\n\n### Build Bootstrap's Grid with JSON or YAML\nThis example shows how to use JSON and handlebars templates to manipulate Bootstrap's grid system. We only have to define the grid one time using templates, then we can updated the grid columns, rows, and even content from a JSON or YAML file.\n\n\n**Screenshot**\nThe finished result of the example project looks like this:\n\n[![grid](https://github.com/assemble/assemble/blob/master/examples/advanced/dest/assets/grid.png?raw=true)][exampleGrid]\n\n---\n\nThis is what our handlebars grid looks like. **_No really, this is the code for the entire grid!_**:\n\n``` html\n{{#grid.container}}\n  <div class=\"container\">\n  {{#rows}}\n    <div class=\"row\">\n      {{#columns}}\n        <div class=\"span{{width}}\"> {{md content}} </div>\n      {{/columns}}\n    </div>\n  {{/rows}}\n  </div>\n{{/grid.container}}\n```\n\nAnd then we use an external data file, either `grid.yml` or `grid.json`, to configure the grid and provide the content.\n\n**YAML version**\nThis is the data for our grid, written in YAML (`grid.yml`):\n\n``` yaml\n---\ncontainer:\n  rows:\n  - columns:\n    - width: 4\n      heading: Overview\n      content: <%= content %>/overview.md\n    - width: 4\n      heading: Getting Started\n      content: <%= content %>/getting-started.md\n    - width: 4\n      heading: Basics\n      content: <%= content %>/basics.md\n  - columns:\n    - width: 6\n      heading: Templates\n      content: <%= content %>/templates.md\n    - width: 6\n      heading: Advanced\n      content: <%= content %>/advanced.md\n...\n```\n\n**JSON version**\n\nAnd the same configuration writtin in JSON (`grid.json`) instead:\n\n``` json\n{\n  \"container\": {\n    \"rows\": [\n      {\n        \"columns\": [\n          {\n            \"width\": 4,\n            \"heading\": \"Overview\",\n            \"content\": \"<%= content %>/overview.md\"\n          },\n          {\n            \"width\": 4,\n            \"heading\": \"Getting Started\",\n            \"content\": \"<%= content %>/getting-started.md\"\n          },\n          {\n            \"width\": 4,\n            \"heading\": \"Basics\",\n            \"content\": \"<%= content %>/basics.md\"\n          }\n        ]\n      },\n      {\n        \"columns\": [\n          {\n            \"width\": 6,\n            \"heading\": \"Templates\",\n            \"content\": \"<%= content %>/templates.md\"\n          },\n          {\n            \"width\": 6,\n            \"heading\": \"Advanced\",\n            \"content\": \"<%= content %>/advanced.md\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nIf you're satisfied with the default `src` and `dest` paths in the `assemble`, simply run `grunt assemble` to compile the grid to static HTML. Or run `grunt watch` to continuously watch files and automatically re-build when changes occur.\n\n\n## Contributing\nWant to help make **assemble** even better? All constructive feedback and contributions are welcome, so please consider contributing!  We can always use help creating, tests, documentation or resolving [Issues](https://github.com/assemble/assemble/issues), but if you have other ideas for how you can help, Brian and I would love to hear them!\n\n[https://github.com/assemble/assemble/issues](http://github.com/assemble/assemble/issues)\n \n\n## Authors\n\n**Jon Schlinkert**\n\n+ [http://twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)\n+ [http://github.com/jonschlinkert](http://github.com/jonschlinkert)\n\n**Brian Woodward**\n\n+ [http://twitter.com/doowb](http://twitter.com/doowb)\n+ [http://github.com/doowb](http://github.com/doowb)\n\n## Copyright and license\nCopyright 2013 Assemble\n\n[MIT License](LICENSE-MIT)\n\n## Release History\n* 2013-03-22    v0.3.22    Merged global and target level options so data and partial files can be joined \n* 2013-03-22    v0.3.21    Valid YAML now allowed in options.data object (along with JSON) \n* 2013-03-18    v0.3.14    new relative helper for resolving relative paths \n* 2013-03-16    v0.3.13    new dashify and formatPhone helpers \n* then-til-now    v0.1.0-v0.3.0    Leaned how to commit too many times while working on README. \n* Stardate 45047.2    v0.1.0    Visited the uninhabited El-Adrel system. Returned home. Started assemble. \n\n\n### Roadmap\n_(Big plans in the works)_\n\n---\nAuthored by [assemble](https://github.com/assemble/assemble)\n\n_This file was generated using Grunt and [assemble](http://github.com/assemble/assemble) on Fri Mar 29 2013 21:51:28._\n\n\n\n\n[download]: https://github.com/assemble/assemble/zipball/master\n\n\n[org]: https://github.com/assemble\n[assemble]: https://github.com/assemble/assemble\n[issues]: https://github.com/assemble/assemble/issues\n[wiki]: https://github.com/assemble/assemble/wiki\n\n\n\n[config]: https://github.com/assemble/assemble/wiki/Configuration\n[gruntfile]: https://github.com/assemble/assemble/wiki/Gruntfile\n[tasks]: https://github.com/assemble/assemble/wiki/Task-and-Targets\n[options]: https://github.com/assemble/assemble/wiki/Options\n\n\n[templates]: https://github.com/assemble/assemble/wiki/Templates\n[layouts]: https://github.com/assemble/assemble/wiki/Layouts\n[pages]: https://github.com/assemble/assemble/wiki/Pages\n[partials]: https://github.com/assemble/assemble/wiki/Partials\n\n\n[content]: https://github.com/assemble/assemble/wiki/Content\n[data]: https://github.com/assemble/assemble/wiki/Data\n[yaml]: https://github.com/assemble/assemble/wiki/YAML-front-matter\n[markdown]: https://github.com/assemble/assemble/wiki/Markdown\n\n\n[helpers]: https://github.com/assemble/assemble/wiki/Helpers\n[assets]: https://github.com/assemble/assemble/wiki/Assets\n[collections]: https://github.com/assemble/assemble/wiki/Collections\n\n\n[examples]: https://github.com/assemble/assemble-examples\n[exampleReadme]: https://github.com/assemble/assemble-examples-readme\n[exampleBasic]: https://github.com/assemble/assemble-examples-basic\n[exampleAdvanced]: https://github.com/assemble/assemble-examples-advanced\n[exampleGrid]: https://github.com/assemble/assemble-examples-grid\n[exampleTable]: https://github.com/assemble/assemble-examples-table\n[exampleForm]: https://github.com/assemble/assemble-examples-form\n[exampleSite]: https://github.com/assemble/assemble-examples-site\n[exampleSitemap]: https://github.com/assemble/assemble-examples-sitemap\n\n\n[contribute]: https://github.com/assemble/assemble/wiki/Contributing-to-Assemble\n[extend]: https://github.com/assemble/assemble/wiki/Extending-Assemble\n[helpers-lib]: https://github.com/assemble/assemble/wiki/Helpers\n\n\n[grunt]: http://gruntjs.com/\n[upgrading]: http://gruntjs.com/upgrading-from-0.3-to-0.4\n[getting-started]: http://gruntjs.com/getting-started\n[package]: https://npmjs.org/doc/json.html\n\n\n[assemble]: https://github.com/assemble/assemble\n[pre]: https://github.com/assemble/pre\n[dry]: https://github.com/assemble/dry\n[assemble-github-com]: https://github.com/assemble/assemble.github.com\n[assemble-examples-bootstrap]: https://github.com/assemble/assemble-examples-bootstrap\n[assemble-internal]: https://github.com/assemble/assemble-internal\n[assemble-less]: https://github.com/assemble/assemble-less\n[assemble-examples-readme]: https://github.com/assemble/assemble-examples-readme\n[grunt-toc]: https://github.com/assemble/grunt-toc\n[helper-lib]: https://github.com/assemble/helper-lib\n[grunt-dry]: https://github.com/assemble/grunt-dry\n[assemble-examples]: https://github.com/assemble/assemble-examples\n",
  "readmeFilename": "README.md",
  "_id": "assemble@0.3.24",
  "dist": {
    "shasum": "39ec2d83a84063d2a53e6d83414f76e0fc057525"
  },
  "_from": "assemble@git://github.com/assemble/assemble.git"
}
